#!/bin/bash
set -uo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

expand_headers_on_error() {
  echo "trapped an error"
  echo "^^^ +++"
  exit $1
}
trap 'expand_headers_on_error "$?"' ERR

ensure_stopped() {
  echo '+++ :warning: Trapped fired, signal received, stopping container gracefully'
  # docker stop "${container_name}" || true
  compose_cleanup ${run_service}
  echo '~~~ Last log lines that may be missing above (if container was not already removed)'
  docker logs "${container_name}" || true
  exit $1
}
trap 'ensure_stopped "$?"' SIGINT SIGTERM SIGQUIT

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"
# shellcheck source=lib/metadata.bash
. "$DIR/../lib/metadata.bash"
# shellcheck source=lib/run.bash
. "$DIR/../lib/run.bash"

commands=()

[[ -n "$(plugin_read_list BUILD)" ]] && commands+=("BUILD")
[[ -n "$(plugin_read_list RUN)" ]] && commands+=("RUN")
[[ -n "$(plugin_read_list PUSH)" ]] && commands+=("PUSH")

# Don't convert paths on gitbash on windows
if is_windows ; then
  export MSYS_NO_PATHCONV=1
fi

if [[ ${#commands[@]} -lt 1 ]] ; then
  echo "+++ Docker Compose plugin error"
  echo "No build, run or push options were specified"
  exit 1
fi

# Dispatch to the command file
if in_array "BUILD" "${commands[@]}" ; then
  # shellcheck source=commands/build.sh
  . "$DIR/../commands/build.sh"
fi
if in_array "RUN" "${commands[@]}" ; then
  # shellcheck source=commands/run.sh
  . "$DIR/../commands/run.sh"
fi
if in_array "PUSH" "${commands[@]}" ; then
  # shellcheck source=lib/push.bash
  . "$DIR/../lib/push.bash"
  # shellcheck source=commands/push.sh
  . "$DIR/../commands/push.sh"
fi
